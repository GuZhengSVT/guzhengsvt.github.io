<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>デジタル信号処理 on 孤筝の温暖小家</title><link>https://guzhengsvt.cn/ja/tags/%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E4%BF%A1%E5%8F%B7%E5%87%A6%E7%90%86/</link><description>Recent content from 孤筝の温暖小家</description><generator>Hugo</generator><language>ja</language><managingEditor>lvbowen040427@163.com (孤筝)</managingEditor><webMaster>lvbowen040427@163.com (孤筝)</webMaster><copyright>特別な記載がない限り、このブログのすべての記事は BY-NC-SA ライセンスの下で提供されています。転載の際は出典を明記してください！</copyright><lastBuildDate>Wed, 04 Sep 2024 23:44:15 +0800</lastBuildDate><atom:link href="https://guzhengsvt.cn/ja/tags/%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E4%BF%A1%E5%8F%B7%E5%87%A6%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>デジタル信号処理</title><link>https://guzhengsvt.cn/ja/post/physics/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</link><pubDate>Wed, 04 Sep 2024 23:44:15 +0800</pubDate><author>lvbowen040427@163.com (孤筝)</author><guid>https://guzhengsvt.cn/ja/post/physics/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</guid><description>
<![CDATA[<h1>デジタル信号処理</h1><p>著者：孤筝（lvbowen040427@163.com）</p>
        
          <h1 id="デジタル信号処理の基本概念">
<a class="header-anchor" href="#%e3%83%87%e3%82%b8%e3%82%bf%e3%83%ab%e4%bf%a1%e5%8f%b7%e5%87%a6%e7%90%86%e3%81%ae%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5"></a>
デジタル信号処理の基本概念
</h1><h2 id="信号の分類">
<a class="header-anchor" href="#%e4%bf%a1%e5%8f%b7%e3%81%ae%e5%88%86%e9%a1%9e"></a>
信号の分類
</h2><ol>
<li>連続信号：アナログ信号、時域連続信号。</li>
<li>時域離散信号：振幅値が連続、時間値が離散。</li>
<li>振幅離散信号：振幅値が離散、時間値が連続。</li>
<li>デジタル信号：振幅と時間の両方が離散値。</li>
</ol>
<h3 id="違い">
<a class="header-anchor" href="#%e9%81%95%e3%81%84"></a>
違い
</h3><p>時域離散信号とデジタル信号の違いは、デジタル信号に量子化誤差が存在する点のみである。</p>
<h2 id="デジタル信号処理の実現方法">
<a class="header-anchor" href="#%e3%83%87%e3%82%b8%e3%82%bf%e3%83%ab%e4%bf%a1%e5%8f%b7%e5%87%a6%e7%90%86%e3%81%ae%e5%ae%9f%e7%8f%be%e6%96%b9%e6%b3%95"></a>
デジタル信号処理の実現方法
</h2><p>デジタル信号処理の主な対象は<strong>デジタル信号</strong>であり、<strong>数値演算</strong>の方法を用いて処理目的を達成する。</p>
<h3 id="ソフトウェア実装">
<a class="header-anchor" href="#%e3%82%bd%e3%83%95%e3%83%88%e3%82%a6%e3%82%a7%e3%82%a2%e5%ae%9f%e8%a3%85"></a>
ソフトウェア実装
</h3><p>原理とアルゴリズムに基づき、プログラムを作成して汎用コンピュータで実現する。</p>
<ul>
<li>利点：柔軟性が高い</li>
<li>欠点：演算速度が遅く、リアルタイム処理効果を得ることが難しい。</li>
<li>アルゴリズム研究とシミュレーションに適している。</li>
</ul>
<h3 id="ハードウェア実装">
<a class="header-anchor" href="#%e3%83%8f%e3%83%bc%e3%83%89%e3%82%a6%e3%82%a7%e3%82%a2%e5%ae%9f%e8%a3%85"></a>
ハードウェア実装
</h3><p>具体的な要求とアルゴリズムに従い、ハードウェア構成図を設計し、乗算器、加算器、遅延器、制御器、メモリ、および入出力インターフェースなどの基本部品を用いて実現する。</p>
<ul>
<li>利点：演算速度が速く、リアルタイム処理が可能</li>
<li>欠点：柔軟性に欠ける</li>
</ul>
<p>ハードウェア実装とは、適切なDSPチップを選択し、チップの言語とタスク要求に適合するソフトウェアを組み合わせて、特定の信号処理機能を実現する方法である。</p>
<h3 id="専用チップ">
<a class="header-anchor" href="#%e5%b0%82%e7%94%a8%e3%83%81%e3%83%83%e3%83%97"></a>
専用チップ
</h3><p>専用の**デジタル信号処理チップ（DSPチップ）**を採用する方法は、現在最も発展が速く、応用が広い方法である。DSPチップは汎用マイクロコントローラよりも優れた利点を持ち、デジタル信号処理の特徴を組み合わせ、<strong>内部に乗算器とアキュムレータを備え</strong>、構造上パイプライン動作方式および並列構造、マルチバスを採用し、デジタル信号処理に適した命令を備えた、高速演算が可能なマイクロプロセッサである。</p>
<p>より高速なリアルタイムシステムにおいて、DSPの速度も要求を満たさない場合、プログラマブル超大规模集積回路（FPGA）を採用するか、専用チップを開発して実現する必要がある。</p>
<h2 id="デジタル信号処理の特徴">
<a class="header-anchor" href="#%e3%83%87%e3%82%b8%e3%82%bf%e3%83%ab%e4%bf%a1%e5%8f%b7%e5%87%a6%e7%90%86%e3%81%ae%e7%89%b9%e5%be%b4"></a>
デジタル信号処理の特徴
</h2><p>アナログ信号処理と比較して、デジタル信号処理には以下の特徴があります：</p>
<ol>
<li>柔軟性</li>
<li>高精度と高安定性</li>
<li>大規模集積化が容易</li>
<li>記憶、複雑な変換や演算など、アナログシステムでは実現できない多くの機能を実現可能。</li>
</ol>
<h2 id="信号の次元">
<a class="header-anchor" href="#%e4%bf%a1%e5%8f%b7%e3%81%ae%e6%ac%a1%e5%85%83"></a>
信号の次元
</h2><p>信号は通常、1つの独立変数または複数の独立変数の関数です。
独立変数が1つだけの場合、それは1次元信号と呼ばれます。2つ以上の独立変数がある場合、それは多次元信号と呼ばれます。</p>
<h1 id="時間領域離散信号とシステム">
<a class="header-anchor" href="#%e6%99%82%e9%96%93%e9%a0%98%e5%9f%9f%e9%9b%a2%e6%95%a3%e4%bf%a1%e5%8f%b7%e3%81%a8%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0"></a>
時間領域離散信号とシステム
</h1><h2 id="時間領域離散信号">
<a class="header-anchor" href="#%e6%99%82%e9%96%93%e9%a0%98%e5%9f%9f%e9%9b%a2%e6%95%a3%e4%bf%a1%e5%8f%b7"></a>
時間領域離散信号
</h2><p>実際に遭遇する信号は一般的にアナログ信号であり、これに<strong>等間隔サンプリング</strong>を施すことで時間領域離散信号を得ることができる。</p>
<p>アナログ信号 $x_a(t)$ 、離散時間点 $t_n$ 。
均一サンプリング（等間隔サンプリング）の場合、サンプリング間隔 $T$ 、$t_n=nT$
</p>
$$
x(n)=x_a(t)|_{t=nT}=x_a(nT),- \infty \lt n \lt \infty
$$<p>
$x(n)$ を時間領域離散信号と呼び、$n$ を整数とすると、次のようなシーケンスが得られる。
</p>
$$
x(n)=\{\cdots ,x_a(-2T),x_a(-T),x_a(0),x_a(T),x_a(2T),\cdots \}
$$<p>
時間領域離散信号はシーケンスとも呼ばれる。</p>
<h3 id="シーケンスの表現方法">
<a class="header-anchor" href="#%e3%82%b7%e3%83%bc%e3%82%b1%e3%83%b3%e3%82%b9%e3%81%ae%e8%a1%a8%e7%8f%be%e6%96%b9%e6%b3%95"></a>
シーケンスの表現方法
</h3><h4 id="集合記号">
<a class="header-anchor" href="#%e9%9b%86%e5%90%88%e8%a8%98%e5%8f%b7"></a>
集合記号
</h4><p>数の集合は集合記号 $\{\cdot \}$ で表され、時間領域離散信号は順序付けられた数の集合として表現できる。
集合内で下線が引かれた要素は、$n=0$ の時刻におけるサンプル値を示す。</p>
<h4 id="数式表現">
<a class="header-anchor" href="#%e6%95%b0%e5%bc%8f%e8%a1%a8%e7%8f%be"></a>
数式表現
</h4><p>例:</p>
$$
x(n)=a^{|n|},0 \lt a \lt 1,-\infty \lt n \lt \infty
$$<h4 id="グラフ表現">
<a class="header-anchor" href="#%e3%82%b0%e3%83%a9%e3%83%95%e8%a1%a8%e7%8f%be"></a>
グラフ表現
</h4><p>横軸を $n$ 、縦軸を $x$ の値とし、縦線の先端に黒点を付ける。</p>
<h3 id="一般的な代表的なシーケンス">
<a class="header-anchor" href="#%e4%b8%80%e8%88%ac%e7%9a%84%e3%81%aa%e4%bb%a3%e8%a1%a8%e7%9a%84%e3%81%aa%e3%82%b7%e3%83%bc%e3%82%b1%e3%83%b3%e3%82%b9"></a>
一般的な代表的なシーケンス
</h3><h4 id="単位インパルスシーケンス">
<a class="header-anchor" href="#%e5%8d%98%e4%bd%8d%e3%82%a4%e3%83%b3%e3%83%91%e3%83%ab%e3%82%b9%e3%82%b7%e3%83%bc%e3%82%b1%e3%83%b3%e3%82%b9"></a>
単位インパルスシーケンス $\delta(n)$
</h4>$$
\delta(n)=
\begin{cases}
1 & n=0\\
0 & n \ne 0\\
\end{cases}
$$<p>
単位サンプリングシーケンスとも呼ばれ、単位インパルス信号 $\delta(t)$ とは異なる。</p>
<h4 id="単位ステップシーケンス">
<a class="header-anchor" href="#%e5%8d%98%e4%bd%8d%e3%82%b9%e3%83%86%e3%83%83%e3%83%97%e3%82%b7%e3%83%bc%e3%82%b1%e3%83%b3%e3%82%b9"></a>
単位ステップシーケンス $u(n)$
</h4>$$
u(n)=
\begin{cases}
1 & n \ge 0\\
0 & n  \lt  0\\
\end{cases}
$$$$
\delta(n)=u(n)-u(n-1)
$$<p>
</p>
$$
u(n)=\sum^{\infty}_{k=0}\delta(n-k)
$$<h4 id="矩形シーケンス">
<a class="header-anchor" href="#%e7%9f%a9%e5%bd%a2%e3%82%b7%e3%83%bc%e3%82%b1%e3%83%b3%e3%82%b9"></a>
矩形シーケンス $R_N(n)$
</h4>$$
R_N(n)=
\begin{cases}
1 & 0 \le n \le N-1\\
0 & Others
\end{cases}
$$<p>
$N$ を矩形シーケンスの長さと呼び、矩形シーケンスは単位ステップシーケンスで表現できる。
</p>
$$
R_N(n)=u(n)-u(n-N)
$$<h4 id="実指数シーケンス">
<a class="header-anchor" href="#%e5%ae%9f%e6%8c%87%e6%95%b0%e3%82%b7%e3%83%bc%e3%82%b1%e3%83%b3%e3%82%b9"></a>
実指数シーケンス
</h4>$$
x(n)=a^n u(n),a は実数
$$<ul>
<li>$|a| \lt 1$ の場合、$x(n)$ を収束シーケンスと呼ぶ</li>
<li>$|a| \gt 1$ の場合、$x(n)$ を発散シーケンスと呼ぶ</li>
</ul>
<h4 id="正弦波シーケンス">
<a class="header-anchor" href="#%e6%ad%a3%e5%bc%a6%e6%b3%a2%e3%82%b7%e3%83%bc%e3%82%b1%e3%83%b3%e3%82%b9"></a>
正弦波シーケンス
</h4>$$
x(n)=\sin (\omega n)
$$<p>
$\omega$ を正弦波シーケンスの**デジタル領域周波数（デジタル周波数）**と呼び、単位はラジアン $rad$ で、シーケンスの変化率（隣接する2つのシーケンス値間の位相変化のラジアン数）を表す。</p>
<p><strong>アナログ角周波数 $\varOmega$</strong>、正弦波シーケンスがアナログ信号 $x_a(t)=\sin (\varOmega t)$ からサンプリングされた場合
</p>
$$
x(n)=x_a(t)|_{t=nT}=\sin (\varOmega nT)=\sin (\omega n)
$$<p>
これにより、デジタル周波数とアナログ角周波数の関係が得られる。
</p>
$$
\omega=\varOmega T
$$<p>
サンプリング周波数 $F_s=\frac{1}{T}$ であるため、
</p>
$$
\omega=\frac{\varOmega}{F_s}
$$<p>
<em>デジタル領域周波数は、アナログ角周波数をサンプリング周波数で正規化した周波数である。</em></p>
<h4 id="複素指数シーケンス">
<a class="header-anchor" href="#%e8%a4%87%e7%b4%a0%e6%8c%87%e6%95%b0%e3%82%b7%e3%83%bc%e3%82%b1%e3%83%b3%e3%82%b9"></a>
複素指数シーケンス
</h4>$$
x(n)=e^{(\sigma+j \omega_0)n}=\cos(\omega_0 n)+j \sin(\omega_0 n)
$$<p>
$n$ が整数であるため、正弦波シーケンスと複素指数シーケンスはともに $2 \pi$ を周期とする。</p>
<h4 id="周期シーケンス">
<a class="header-anchor" href="#%e5%91%a8%e6%9c%9f%e3%82%b7%e3%83%bc%e3%82%b1%e3%83%b3%e3%82%b9"></a>
周期シーケンス
</h4><p>すべての $n$ に対して、<strong>最小の正の整数</strong> $N$ が存在し、次の等式が成り立つ場合：
</p>
$$
x(n)=x(n+N),-\infty \lt n \lt \infty
$$<p>
シーケンス $x(n)$ を周期的シーケンスと呼び、周期を $N$ とする。</p>
<h3 id="シーケンスの演算">
<a class="header-anchor" href="#%e3%82%b7%e3%83%bc%e3%82%b1%e3%83%b3%e3%82%b9%e3%81%ae%e6%bc%94%e7%ae%97"></a>
シーケンスの演算
</h3><p>簡単</p>
<h4 id="加算と乗算">
<a class="header-anchor" href="#%e5%8a%a0%e7%ae%97%e3%81%a8%e4%b9%97%e7%ae%97"></a>
加算と乗算
</h4><h4 id="シフト反転スケール変換">
<a class="header-anchor" href="#%e3%82%b7%e3%83%95%e3%83%88%e5%8f%8d%e8%bb%a2%e3%82%b9%e3%82%b1%e3%83%bc%e3%83%ab%e5%a4%89%e6%8f%9b"></a>
シフト、反転、スケール変換
</h4><h2 id="離散時間領域システム">
<a class="header-anchor" href="#%e9%9b%a2%e6%95%a3%e6%99%82%e9%96%93%e9%a0%98%e5%9f%9f%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0"></a>
離散時間領域システム
</h2><p>システムの入力が $x(n)$、出力が $y(n)$ で、演算関係は $T[\cdot]$ で表される。
</p>
$$
y(n)=T[x(n)]
$$<h3 id="線形システム">
<a class="header-anchor" href="#%e7%b7%9a%e5%bd%a2%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0"></a>
線形システム
</h3><p>システムの入力と出力の間が線形重ね合わせの原理を満たすシステムを線形システムと呼ぶ。</p>
<h4 id="加法性">
<a class="header-anchor" href="#%e5%8a%a0%e6%b3%95%e6%80%a7"></a>
加法性
</h4>$$
y_1(n)=T[x_1(n)],y_2(n)=T[x_2(n)]
$$<p>
</p>
$$
T[x_1(n)+x_2(n)]=y_1(n)+y_2(n)
$$<h4 id="斉次性比例性">
<a class="header-anchor" href="#%e6%96%89%e6%ac%a1%e6%80%a7%e6%af%94%e4%be%8b%e6%80%a7"></a>
斉次性（比例性）
</h4>$$
T[a \times x(n)]=a \times y(n)
$$<h3 id="時不変システム">
<a class="header-anchor" href="#%e6%99%82%e4%b8%8d%e5%a4%89%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0"></a>
時不変システム
</h3><p>システムが入力信号に対する演算関係 $T[\cdot]$ が演算過程全体で時間変化せず、あるいはシステムが入力信号に応答する時間に依存しない場合、このようなシステムを時不変システムと呼ぶ。
</p>
$$
y(n)=T[x(n)]
$$<p>
</p>
$$
y(n-n_0)=T[x(n-n_0)]
$$<h3 id="線形時不変システムの特徴">
<a class="header-anchor" href="#%e7%b7%9a%e5%bd%a2%e6%99%82%e4%b8%8d%e5%a4%89%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0%e3%81%ae%e7%89%b9%e5%be%b4"></a>
線形時不変システムの特徴
</h3><p>完全応答=零入力応答+零状態応答</p>
<h4 id="単位インパルス応答">
<a class="header-anchor" href="#%e5%8d%98%e4%bd%8d%e3%82%a4%e3%83%b3%e3%83%91%e3%83%ab%e3%82%b9%e5%bf%9c%e7%ad%94"></a>
単位インパルス応答
</h4><p>初期状態が 0（零入力応答なし）
</p>
$$
h(n)=T[\delta(n)]
$$<p>
</p>
$$
x(n)=\sum^{\infty}_{m=-\infty}x(m)\delta(n-m)
$$<p>
</p>
$$
\begin{align}
y(n)
&=T[x(n)]\\
&=T[\sum^{\infty}_{m=-\infty}x(m)\delta(n-m)]\\
&=\sum^{\infty}_{m=-\infty}x(m)T[\delta(n-m)]\\
&=\sum^{\infty}_{m=-\infty}x(m)h(n-m)\\
&=x(n)*h(n)
\end{align}
$$<p>
畳み込みに関する知識は『信号とシステム』を参照</p>
<h3 id="システムの因果性">
<a class="header-anchor" href="#%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0%e3%81%ae%e5%9b%a0%e6%9e%9c%e6%80%a7"></a>
システムの因果性
</h3><p>定義：システムの $n$ 時点の出力が $n$ 時点およびそれ以前の入力系列のみに依存し、$n$ 時点以降の入力系列に依存しない場合、そのシステムは因果性を持つ、または因果システムであると言う。</p>
<p>==必要十分条件==：システムの単位インパルス応答が次の式を満たす
</p>
$$
h(n)=0 \quad n \lt 0
$$<h3 id="システムの安定性">
<a class="header-anchor" href="#%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0%e3%81%ae%e5%ae%89%e5%ae%9a%e6%80%a7"></a>
システムの安定性
</h3><p>定義：有界な入力に対して、システムが生成する出力も<strong>有界</strong>である場合、そのシステムは安定性を持つ、または安定システムであると言う。
==必要十分条件==：システムの単位インパルス応答が絶対可和である。
</p>
$$
\sum^{\infty}_{m=-\infty}|h(n)| \lt \infty
$$<h3 id="線形定係数差分方程式">
<a class="header-anchor" href="#%e7%b7%9a%e5%bd%a2%e5%ae%9a%e4%bf%82%e6%95%b0%e5%b7%ae%e5%88%86%e6%96%b9%e7%a8%8b%e5%bc%8f"></a>
線形定係数差分方程式
</h3>
        
        <hr><p>この記事は2024-09-04に<a href='https://guzhengsvt.cn/'>孤筝の温暖小家</a>で公開され、最終更新日は2024-09-04です</p><p>特別な記載がない限り、このブログのすべての記事は BY-NC-SA ライセンスの下で提供されています。転載の際は出典を明記してください！</p>]]></description><category>Physics</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on 为什么要演奏春日影！</title>
    <link>http://localhost:1313/categories/code/</link>
    <description>Recent content in Code on 为什么要演奏春日影！</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 15 Feb 2024 11:44:33 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MicroPython函数库</title>
      <link>http://localhost:1313/post/code/micropython%E5%87%BD%E6%95%B0%E5%BA%93/</link>
      <pubDate>Wed, 16 Apr 2025 15:34:33 +0800</pubDate>
      <guid>http://localhost:1313/post/code/micropython%E5%87%BD%E6%95%B0%E5%BA%93/</guid>
      <description>&lt;h1 id=&#34;machine-与硬件相关功能&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#machine-%e4%b8%8e%e7%a1%ac%e4%bb%b6%e7%9b%b8%e5%85%b3%e5%8a%9f%e8%83%bd&#34;&gt;&lt;/a&gt;&#xA;machine-与硬件相关功能&#xA;&lt;/h1&gt;&lt;h2 id=&#34;pin类&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#pin%e7%b1%bb&#34;&gt;&lt;/a&gt;&#xA;Pin类&#xA;&lt;/h2&gt;&lt;h3 id=&#34;machinepinidmodenonepullnonevalue&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#machinepinidmodenonepullnonevalue&#34;&gt;&lt;/a&gt;&#xA;&lt;code&gt;machine.Pin(id,mode=None,pull=None,value)&lt;/code&gt;&#xA;&lt;/h3&gt;&lt;p&gt;Pin对象构造函数&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;id：GPIO编号，对于Pico为0-29&lt;/li&gt;&#xA;&lt;li&gt;mode：模式，可选&lt;code&gt;None，Pin.IN(0),Pin.OUT(1),Pin.OPEN_DRAIN(2)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;pull：使用内部上下拉电阻，仅在输入模式下有效，可选&lt;code&gt;None,Pin.PULL_UP(1),Pin.DOWN(2)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;value：输出或开漏模式下端口值，0为低电位，1为高电位&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;pininitmodenonepullnone&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#pininitmodenonepullnone&#34;&gt;&lt;/a&gt;&#xA;&lt;code&gt;Pin.init(mode=None,pull=None)&lt;/code&gt;&#xA;&lt;/h3&gt;&lt;p&gt;重新初始化GPIO口&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构实机实验报告8——关键路径</title>
      <link>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A8%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Wed, 16 Apr 2025 15:00:26 +0800</pubDate>
      <guid>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A8%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/</guid>
      <description>&lt;h2 id=&#34;a-问题分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#a-%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;a. 问题分析&#xA;&lt;/h2&gt;&lt;p&gt;在关键路径方法中，我们需要找到项目中的关键路径，即影响项目总持续时间的关键活动序列。为了解决这个问题，我们首先构建了一个表示项目活动的数据结构 &lt;code&gt;Activity&lt;/code&gt;，并设计了一个 &lt;code&gt;Project&lt;/code&gt; 类来处理项目的计算和输出。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构实机实验报告7——Kruskal算法与最小生成树问题，Dijkstra算法与带权图最短路径问题</title>
      <link>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A7kruskal%E7%AE%97%E6%B3%95%E4%B8%8E%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%97%AE%E9%A2%98dijkstra%E7%AE%97%E6%B3%95%E4%B8%8E%E5%B8%A6%E6%9D%83%E5%9B%BE%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 16 Apr 2025 14:58:44 +0800</pubDate>
      <guid>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A7kruskal%E7%AE%97%E6%B3%95%E4%B8%8E%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%97%AE%E9%A2%98dijkstra%E7%AE%97%E6%B3%95%E4%B8%8E%E5%B8%A6%E6%9D%83%E5%9B%BE%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h1 id=&#34;kruskal算法生成最小生成树&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#kruskal%e7%ae%97%e6%b3%95%e7%94%9f%e6%88%90%e6%9c%80%e5%b0%8f%e7%94%9f%e6%88%90%e6%a0%91&#34;&gt;&lt;/a&gt;&#xA;Kruskal算法生成最小生成树&#xA;&lt;/h1&gt;&lt;h2 id=&#34;a-问题分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#a-%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;a 问题分析&#xA;&lt;/h2&gt;&lt;p&gt;我们需要使用 Kruskal 算法找到一个包含10个节点和20条边的图的最小生成树。Kruskal算法基于贪心思想，通过不断选择权重最小的边，并确保添加这条边不形成环路，来构建最小生成树。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构实机实验报告6——前序、后续将二叉树线索化，图的邻接矩阵和邻接表的存储数据结构实机实验报告6——前序、后续将二叉树线索化，图的邻接矩阵和邻接表的存储</title>
      <link>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A6%E5%89%8D%E5%BA%8F%E5%90%8E%E7%BB%AD%E5%B0%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BA%BF%E7%B4%A2%E5%8C%96%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E5%92%8C%E9%82%BB%E6%8E%A5%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A6%E5%89%8D%E5%BA%8F%E5%90%8E%E7%BB%AD%E5%B0%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BA%BF%E7%B4%A2%E5%8C%96%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E5%92%8C%E9%82%BB%E6%8E%A5%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8/</link>
      <pubDate>Wed, 16 Apr 2025 14:56:33 +0800</pubDate>
      <guid>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A6%E5%89%8D%E5%BA%8F%E5%90%8E%E7%BB%AD%E5%B0%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BA%BF%E7%B4%A2%E5%8C%96%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E5%92%8C%E9%82%BB%E6%8E%A5%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A6%E5%89%8D%E5%BA%8F%E5%90%8E%E7%BB%AD%E5%B0%86%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BA%BF%E7%B4%A2%E5%8C%96%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E5%92%8C%E9%82%BB%E6%8E%A5%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8/</guid>
      <description>&lt;h1 id=&#34;前序后续将二叉树线索化&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%89%8d%e5%ba%8f%e5%90%8e%e7%bb%ad%e5%b0%86%e4%ba%8c%e5%8f%89%e6%a0%91%e7%ba%bf%e7%b4%a2%e5%8c%96&#34;&gt;&lt;/a&gt;&#xA;前序、后续将二叉树线索化&#xA;&lt;/h1&gt;&lt;h2 id=&#34;a-问题分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#a-%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;a. 问题分析&#xA;&lt;/h2&gt;&lt;p&gt;我们需要实现一个二叉树的前序线索化。线索化是一种将二叉链表中的空指针域改为指向该节点在某种遍历次序下的前驱节点或后继节点的方法。这样，我们就可以通过前序、中序或后序中的任何一个节点来开始，而不仅仅是从根节点开始。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构实机实验报告5——哈夫曼树的编码和译码，排序二叉树的构建和节点删除</title>
      <link>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A5%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E8%AF%91%E7%A0%81%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E8%8A%82%E7%82%B9%E5%88%A0%E9%99%A4/</link>
      <pubDate>Wed, 16 Apr 2025 14:54:04 +0800</pubDate>
      <guid>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A5%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E8%AF%91%E7%A0%81%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E5%92%8C%E8%8A%82%E7%82%B9%E5%88%A0%E9%99%A4/</guid>
      <description>&lt;h1 id=&#34;实现哈夫曼树的编码和译码&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%9e%e7%8e%b0%e5%93%88%e5%a4%ab%e6%9b%bc%e6%a0%91%e7%9a%84%e7%bc%96%e7%a0%81%e5%92%8c%e8%af%91%e7%a0%81&#34;&gt;&lt;/a&gt;&#xA;实现哈夫曼树的编码和译码&#xA;&lt;/h1&gt;&lt;h3 id=&#34;a-问题分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#a-%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;a. 问题分析&#xA;&lt;/h3&gt;&lt;h4 id=&#34;目标&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e7%9b%ae%e6%a0%87&#34;&gt;&lt;/a&gt;&#xA;目标：&#xA;&lt;/h4&gt;&lt;p&gt;实现哈夫曼树的编码和译码。&lt;/p&gt;&#xA;&lt;h4 id=&#34;问题&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e9%97%ae%e9%a2%98&#34;&gt;&lt;/a&gt;&#xA;问题：&#xA;&lt;/h4&gt;&lt;ol&gt;&#xA;&lt;li&gt;构建哈夫曼树的过程是否正确？&lt;/li&gt;&#xA;&lt;li&gt;是否正确生成了哈夫曼编码？&lt;/li&gt;&#xA;&lt;li&gt;是否正确进行了哈夫曼编码和译码的过程？&lt;/li&gt;&#xA;&lt;li&gt;是否能够处理频率相同的字符？&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;b-算法设计&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#b-%e7%ae%97%e6%b3%95%e8%ae%be%e8%ae%a1&#34;&gt;&lt;/a&gt;&#xA;b. 算法设计&#xA;&lt;/h3&gt;&lt;h4 id=&#34;1-构建哈夫曼树&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e6%9e%84%e5%bb%ba%e5%93%88%e5%a4%ab%e6%9b%bc%e6%a0%91&#34;&gt;&lt;/a&gt;&#xA;1. 构建哈夫曼树：&#xA;&lt;/h4&gt;&lt;ul&gt;&#xA;&lt;li&gt;根据输入的文本，计算字符的频率。&lt;/li&gt;&#xA;&lt;li&gt;使用优先队列（最小堆）构建哈夫曼树。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt; 字符频率的映射 &lt;code&gt;frequencies&lt;/code&gt;。&#xA;&lt;strong&gt;输出：&lt;/strong&gt; 哈夫曼树的根节点 &lt;code&gt;root&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构实机实验报告4——二叉树的构建（完全二叉树BFS结果）、存储（顺序存储与链式存储）、遍历（BFS与DFS）</title>
      <link>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A4%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91bfs%E7%BB%93%E6%9E%9C%E5%AD%98%E5%82%A8%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E4%B8%8E%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E9%81%8D%E5%8E%86bfs%E4%B8%8Edfs/</link>
      <pubDate>Wed, 16 Apr 2025 14:43:54 +0800</pubDate>
      <guid>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A4%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91bfs%E7%BB%93%E6%9E%9C%E5%AD%98%E5%82%A8%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E4%B8%8E%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E9%81%8D%E5%8E%86bfs%E4%B8%8Edfs/</guid>
      <description>&lt;h1 id=&#34;1-根据输入创建二叉树顺序存储和链式存储&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1-%e6%a0%b9%e6%8d%ae%e8%be%93%e5%85%a5%e5%88%9b%e5%bb%ba%e4%ba%8c%e5%8f%89%e6%a0%91%e9%a1%ba%e5%ba%8f%e5%ad%98%e5%82%a8%e5%92%8c%e9%93%be%e5%bc%8f%e5%ad%98%e5%82%a8&#34;&gt;&lt;/a&gt;&#xA;1. 根据输入创建二叉树，顺序存储和链式存储&#xA;&lt;/h1&gt;&lt;h2 id=&#34;a-问题分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#a-%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;a. 问题分析：&#xA;&lt;/h2&gt;&lt;p&gt;在这个问题中，需要根据输入的字符序列创建一个二叉树，要求实现两种存储方式：顺序存储和链式存储。输入的字符序列中，字符 &amp;lsquo;@&amp;rsquo; 表示空节点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构实机实验报告3——KMP算法用于字符串搜索</title>
      <link>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A3kmp%E7%AE%97%E6%B3%95%E7%94%A8%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Wed, 16 Apr 2025 14:42:01 +0800</pubDate>
      <guid>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A3kmp%E7%AE%97%E6%B3%95%E7%94%A8%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%90%9C%E7%B4%A2/</guid>
      <description>&lt;h1 id=&#34;实验目的&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%9e%e9%aa%8c%e7%9b%ae%e7%9a%84&#34;&gt;&lt;/a&gt;&#xA;&lt;strong&gt;实验目的：&lt;/strong&gt;&#xA;&lt;/h1&gt;&lt;p&gt;本实验旨在分析和测试KMP算法的实现，并研究其在字符串搜索中的应用。&lt;/p&gt;&#xA;&lt;h1 id=&#34;实验内容&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%9e%e9%aa%8c%e5%86%85%e5%ae%b9&#34;&gt;&lt;/a&gt;&#xA;&lt;strong&gt;实验内容：&lt;/strong&gt;&#xA;&lt;/h1&gt;&lt;h2 id=&#34;a-问题分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#a-%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;&lt;strong&gt;a 问题分析：&lt;/strong&gt;&#xA;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;如何构建最长前缀后缀匹配表（LPS数组）以提高搜索效率？&lt;/li&gt;&#xA;&lt;li&gt;如何在文本字符串中执行匹配，利用LPS数组来避免不必要的字符比较？&lt;/li&gt;&#xA;&lt;li&gt;如何设计算法以实现模式字符串的搜索？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;b-算法设计&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#b-%e7%ae%97%e6%b3%95%e8%ae%be%e8%ae%a1&#34;&gt;&lt;/a&gt;&#xA;&lt;strong&gt;b 算法设计：&lt;/strong&gt;&#xA;&lt;/h2&gt;&lt;p&gt;KMP算法的设计包括以下关键步骤：&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构实机实验报告2——稀疏矩阵乘法</title>
      <link>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A2%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</link>
      <pubDate>Wed, 16 Apr 2025 14:38:24 +0800</pubDate>
      <guid>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A2%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;问题分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;问题分析&#xA;&lt;/h1&gt;&lt;p&gt;本实验的主要目标是开发一个稀疏矩阵乘法算法，该算法能够将两个稀疏矩阵 A 和 B 相乘，然后输出结果矩阵 C。在这个算法中，稀疏矩阵使用三元组表示，并且用户可以多次输入不同的矩阵数据，计算它们的乘积。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构上机实验报告1——Fibonacci序列、划分子集问题</title>
      <link>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A1fibonacci%E5%BA%8F%E5%88%97%E5%88%92%E5%88%86%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 16 Apr 2025 14:31:17 +0800</pubDate>
      <guid>http://localhost:1313/post/code/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A1fibonacci%E5%BA%8F%E5%88%97%E5%88%92%E5%88%86%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h1 id=&#34;fibonacci序列&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#fibonacci%e5%ba%8f%e5%88%97&#34;&gt;&lt;/a&gt;&#xA;&lt;strong&gt;Fibonacci序列&lt;/strong&gt;&#xA;&lt;/h1&gt;&lt;h2 id=&#34;问题分析&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e9%97%ae%e9%a2%98%e5%88%86%e6%9e%90&#34;&gt;&lt;/a&gt;&#xA;&lt;strong&gt;问题分析&lt;/strong&gt;&#xA;&lt;/h2&gt;&lt;p&gt;要正确实现程序的递归调用和返回，必须解决参数的传递和返回地址问题。具体地说，进行调用时，每递归一次都要给所有参变量重新分配储存空间，并要把前一次调用的实参和本次调用后的返回地址保留。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python基础数据结构</title>
      <link>http://localhost:1313/post/code/python%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 27 Aug 2023 21:40:39 +0800</pubDate>
      <guid>http://localhost:1313/post/code/python%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;p&gt;&lt;strong&gt;elem是单词element（元素）的缩写&lt;/strong&gt;，在程序定义中代表某一不确定的类型，也就是抽象的数据类型。&lt;/p&gt;&#xA;&lt;h1 id=&#34;list&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#list&#34;&gt;&lt;/a&gt;&#xA;list&#xA;&lt;/h1&gt;&lt;h2 id=&#34;定义&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%9a%e4%b9%89&#34;&gt;&lt;/a&gt;&#xA;定义&#xA;&lt;/h2&gt;&lt;p&gt;由一系列元素按顺序进行排列而成的容器&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python其他笔记</title>
      <link>http://localhost:1313/post/code/python%E5%85%B6%E4%BB%96%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 27 Jun 2023 00:57:42 +0800</pubDate>
      <guid>http://localhost:1313/post/code/python%E5%85%B6%E4%BB%96%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h1 id=&#34;注释&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e6%b3%a8%e9%87%8a&#34;&gt;&lt;/a&gt;&#xA;注释&#xA;&lt;/h1&gt;&lt;ul&gt;&#xA;&lt;li&gt;单行注释&#xA;$\#$内容&lt;/li&gt;&#xA;&lt;li&gt;多行注释&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;你好这里绿色的部分是注释&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;这里也是&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;这里就不算注释了&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#单行注释&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#39;&amp;#39;这里不是注释&amp;#39;&amp;#39;&amp;#39;你看会print出来吗？&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;你好&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;终端&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;ne&#34;&gt;SyntaxError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;invalid&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;syntax&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;这样写会报错，看来代码中间插入注释会影响运行&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;多行字符串可以用&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;字符串&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;来定义，注释被解释为赋值操作，所以上面的报错指向末尾的1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;编码格式&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e7%bc%96%e7%a0%81%e6%a0%bc%e5%bc%8f&#34;&gt;&lt;/a&gt;&#xA;编码格式&#xA;&lt;/h1&gt;&lt;ul&gt;&#xA;&lt;li&gt;在Python 2.x中，源文件默认编码格式为ASCII。如果内容中含有汉字，不指定编码格式的话，便不能正确的读取和输出。可以将下面的代码放到源文件的开头，来指定编码格式为UTF-8。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Python 3.x中，源文件默认编码格式为UTF-8。故在使用Python 3.x时，通常不需要指定编码格式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python基础函数</title>
      <link>http://localhost:1313/post/code/python%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 27 Jun 2023 00:55:01 +0800</pubDate>
      <guid>http://localhost:1313/post/code/python%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;h2 id=&#34;函数传参&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%87%bd%e6%95%b0%e4%bc%a0%e5%8f%82&#34;&gt;&lt;/a&gt;&#xA;函数传参&#xA;&lt;/h2&gt;&lt;p&gt;python中，函数传递参数本质上是一种赋值操作&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&#xA;&lt;li&gt;首先有两个变量arr和a，有两个对象1和2&lt;/li&gt;&#xA;&lt;li&gt;a绑定2，func(a)将a绑定的对象2贴上arr标签&lt;/li&gt;&#xA;&lt;li&gt;这时，对象1尚未创建，2贴上a标签和arr标签&lt;/li&gt;&#xA;&lt;li&gt;$arr=1$操作将2上arr标签撕下，创建对象1并贴上arr标签&lt;/li&gt;&#xA;&lt;li&gt;输出结果&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;输入输出&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba&#34;&gt;&lt;/a&gt;&#xA;输入输出&#xA;&lt;/h2&gt;&lt;h3 id=&#34;print函数&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#print%e5%87%bd%e6%95%b0&#34;&gt;&lt;/a&gt;&#xA;print()函数&#xA;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;字符串&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;字符串&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;str1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;str2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;str3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;str1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#空格取代逗号&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#会先计算数值再输出&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#优先执行sum()函数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;==原型==&lt;/strong&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python数据类型及运算符</title>
      <link>http://localhost:1313/post/code/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Tue, 27 Jun 2023 00:49:20 +0800</pubDate>
      <guid>http://localhost:1313/post/code/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>&lt;h2 id=&#34;常量与变量&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%b8%b8%e9%87%8f%e4%b8%8e%e5%8f%98%e9%87%8f&#34;&gt;&lt;/a&gt;&#xA;常量与变量&#xA;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;变量不需要声明类型&lt;/li&gt;&#xA;&lt;li&gt;python用$=$给变量赋值，用$==$比较两个值是否相等，相等返回True，不等返回False。&lt;/li&gt;&#xA;&lt;li&gt;变量使用前必须赋值（不同于C），变量只有赋值后才会被创建。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;变量未定义异常&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Traceback&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;most&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;ne&#34;&gt;NameError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常量——不变的变量&#xA;&lt;strong&gt;python没有任何机制保证变量不会改变对象，被改变时没有报错，没有C的const，所以使用时需要万分小心&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
